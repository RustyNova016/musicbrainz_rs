name: Rust_Checks

on:
  push:
    branches: [ "main", "released" ]
  pull_request:
    branches: [ "main", "released" ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1

# Copied from the dotenvy crate
# https://github.com/allan2/dotenvy/blob/master/.github/workflows/ci.yml

jobs:
  stable_tests:
    runs-on: ${{ matrix.os }}
    needs: clippy
    strategy:
      fail-fast: false
      matrix:
        os:
          #- windows-latest
          - ubuntu-latest
          #- macos-latest
    steps:
      - uses: actions/checkout@v4

      - run: rustup toolchain install stable --profile minimal --no-self-update

      - uses: Swatinem/rust-cache@v2
        with: 
          key: "(${{ matrix.os }})"

      - uses: taiki-e/install-action@cargo-hack
        
      - name: Run async tests
        # Check only async + ratelimit. Blocking only change reqwest to use the blocking runtime.
        run: cargo test --no-default-features --features rate_limit,extras,async,default_tls
  
  # unstable_tests:
  #   runs-on: ${{ matrix.os }}
  #   needs: stable_tests
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       rust: [beta, nightly]
  #       os:
  #         - windows-latest
  #         - ubuntu-latest
  #         - macos-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - run: rustup toolchain install stable --profile minimal --no-self-update

  #     - uses: Swatinem/rust-cache@v2
  #       with: 
  #         key: "(${{ matrix.rust }} - ${{ matrix.os }})"

  #     - uses: taiki-e/install-action@cargo-hack
        
  #     - name: Run tests
  #       run: cargo hack test --feature-powerset --mutually-exclusive-features=rate_limit,blocking --at-least-one-of=async,blocking --exclude-features=async --ignore-private

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install minimal toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: clippy

      - uses: Swatinem/rust-cache@v2

      - uses: taiki-e/install-action@cargo-hack

      - name: Run clippy
        run: cargo hack clippy --feature-powerset --mutually-exclusive-features=async,blocking --at-least-one-of=async,blocking -- -D warnings

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install minimal toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal

      - uses: Swatinem/rust-cache@v2

      - name: Run rustdoc
        env:
          RUSTDOCFLAGS: -D warnings
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps --document-private-items

  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install minimal toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: rustfmt

      - uses: Swatinem/rust-cache@v2

      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --check

  msrv:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: Swatinem/rust-cache@v2
    - uses: taiki-e/install-action@cargo-hack
    - run: cargo hack check --rust-version --workspace --all-targets --ignore-private

  minimum_versions:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
    - uses: Swatinem/rust-cache@v2
    - uses: taiki-e/install-action@cargo-hack
    - uses: taiki-e/install-action@cargo-minimal-versions
    - run: cargo minimal-versions check --direct